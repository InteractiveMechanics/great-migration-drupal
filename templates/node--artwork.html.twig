{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
<section id="01" class="container-fluid">
    <div class="artwork-hero-inner {% if content.field_artwork_type.0['#url'].routeParameters['taxonomy_term'] == 2 %}preciousplaces{% endif %}">                
        <div class="artwork-hero-image border">
            {% for key, content in content.field_poster_images if key|first != '#' %}
                {% set image = content['#item'].entity.uri.value %}
                {% set alt = content['#item'].alt %}

                {% if loop.first %}
                    <div style="background-size:cover; background-image:url({{ file_url(image) }})" class="in"></div>
                {% else %}
                    <div style="background-size:cover; background-image:url({{ file_url(image) }})"></div>
                {% endif %}
            {% endfor %}
        </div>
        <div class="artwork-hero-details-container">
            <div class="artwork-hero-details">
                <h3>{{ content.field_artwork_type.0['#title'] }}</h3>
                <h1>{{ node.title.value }}</h1>
                {% for key, artist in content.field_artists if key|first != '#' %}
					{% set artist = artist['#field_collection_item']%}
					{% if artist.field_artist_name.value %}<h2 class="artist-name">By {{ artist.field_artist_name.value }}</h2>{% endif %}
				{% endfor %}
                <p>{{ content.body }}</p>

				{% if content.field_media_primary_artwork.0['#node'].field_media_gallery_images %}
                    <a 
                        class="launch-gallery btn btn-default btn-lg btn-inverted" data-sub-html='{% for image in content.field_media_primary_artwork.0['#node'].field_media_gallery_images %}{{ image.alt }}{% if not loop.last %}$ {% endif %}{% endfor %}' 
                        data-src-images='{% for image in content.field_media_primary_artwork.0['#node'].field_media_gallery_images %}{{- file_url(image.entity.uri.value) -}}{% if not loop.last %}, {% endif %}{% endfor %}'>
                            <span class="glyphicon glyphicon-picture"></span> View the gallery
                    </a><br/>
                {% endif %}
                {% if content.field_media_primary_artwork.0['#node'].field_media_vimeo_link %}
                    <a 
                        class="launch-video btn btn-default btn-lg btn-inverted"
                        data-src-video="'{{ content.field_media_primary_artwork.0['#node'].field_media_vimeo_link.value }}'">
                            <span class="glyphicon glyphicon-facetime-video"></span> Watch the video
                    </a><br/>
                {% endif %}
                {% if content.field_media_primary_artwork.0['#node'].field_link %}
                    <a 
                        class="launch-link btn btn-default btn-lg btn-inverted"
                        {% if field_media_primary_artwork.0['#node'].field_open_in_popup == 1 %}
                            onclick="window.open({{ field_media_primary_artwork.0['#node'].field_link }},'_blank','toolbar=no, resizable=yes, top=50, left=50, width={{ field_media_primary_artwork.0['#node'].field_popup_width }}, height={{ field_media_primary_artwork.0['#node'].field_popup_height }}')"
                        {% else %}
                            href="{{ field_media_primary_artwork.0['#node'].field_link }}" target="_blank"
                        {% endif %}
                            >
                            <span class="glyphicon glyphicon-share-alt"></span> View the project
                    </a><br/>
                {% endif %}
                {% if content.field_media_primary_artwork.0['#node'].field_media_audio_file %}
                    <a 
                        class="launch-audio btn btn-default btn-lg btn-inverted"
                        data-src-audio="{{ content.field_media_primary_artwork.0['#node'].field_media_audio_file.value }}">
                            <span class="glyphicon glyphicon-volume-up"></span> Listen to the project
                    </a><br/>
                {% endif %}


                {% if content.field_media_ %}
                		{% if content.field_media_.0['#node'].field_media_vimeo_link %}
                		<a 
                        	class="launch-video btn btn-default btn-lg btn-inverted"
							data-src-video="'{{ content.field_media_.0['#node'].field_media_vimeo_link.value }}'"><span class="glyphicon glyphicon-facetime-video"></span> Watch the artist statement</a>
						{% endif %}
                {% endif %}
            </div>
        </div>
    </div>
</section>


{% set second_location = content.field_second_location.0['#field_collection_item'] %}

{% if content.field_show_section_01 %}
    {% set field_location = content.field_location.0['#field_collection_item'] %}
    <section id="02" class="page">
        <div class="content-container">
            <div class="content content-left">
                <h3>About the location</h3>
                <p>{{ content.field_about_the_location_body }}</p>
            </div>
            <div class="images images-right">
                {{ content.field_about_the_location_image }}
            </div>
        </div>
        {% if content.field_show_section_02 %}
        	<div style="position: relative;">
            <div id="map" class="full-map"></div>
            
            {% if second_location %}
            <div style="width: 425px; height: 350px; position: absolute; right: 0; bottom: 0; border-left: 6px solid white; border-top: 6px solid white;">
            	<div id="small-map" style="width:100%; height:100%;">
            	
            	
            		<div style='width: 65%; background-color: white; padding: 10px; z-index: 10000; position: relative; font-size:15px;font-family: "PT Serif", serif;'>
            			<span id="miles"></span> miles from Somewhere, USA
            		</div>
            	</div>
            </div>
            
            
            <script>
                L.mapbox.accessToken = 'pk.eyJ1IjoiaW50ZXJhY3RpdmVtZWNoIiwiYSI6InJlcUtqSk0ifQ.RUwHuEkBbXoJ6SgOnXmYFg';
				var map = L.mapbox.map('small-map', 'mapbox.streets');
				map.setView([{{ field_location.field_latitude.value }}, {{ field_location.field_longitude.value }}], 6);
				
				var fixedMarker = L.marker(new L.LatLng({{ second_location.field_second_latitude.value }}, {{ second_location.field_second_longitude.value }}), {});
				var fc = fixedMarker.getLatLng();
				var container = document.getElementById('miles');
				container.innerHTML = parseInt(fc.distanceTo({lat: {{ field_location.field_latitude.value }}, lng: {{ field_location.field_longitude.value }}}).toFixed(0) / 1600);
                
				map.scrollWheelZoom.disable();
				// Disable drag and zoom handlers.
    
				map.dragging.disable();
				map.touchZoom.disable();
				map.doubleClickZoom.disable();
				map.scrollWheelZoom.disable();
				map.keyboard.disable();
				map.removeControl(map.zoomControl); 
				// Disable tap handler, if present.
				if (map.tap) map.tap.disable();
		
				// Our feature layer for generating all icons and points.
				// Loops through all oral histories with location data.
   
				console.log({{ field_location.field_longitude.value }});
				
				console.log({{ field_location.field_latitude.value }});
				
				var pointLayer = L.mapbox.featureLayer().addTo(map);
				var geoJson = [{
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [
                            {{ field_location.field_longitude.value }},
                            {{ field_location.field_latitude.value }}
                        ]
                    },
                    properties: {
                        title: '{{ field_location.field_location_name.value }}',
                        "icon": {
                            "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-primary.svg",
                            "iconSize": [50, 50], // size of the icon
                            "iconAnchor": [25, 25], // point of the icon which will correspond to marker's location
                            "popupAnchor": [0, -25], // point from which the popup should open relative to the iconAnchor
                            "className": "primary"
                        }
                    }
                },{
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [
                            {{ second_location.field_second_longitude.value }},
                            {{ second_location.field_second_latitude.value }}
                        ]
                    },
                    properties: {
                        title: '{{ second_location.field_second_location_name.value }}',
                        "icon": {
                            "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-primary.svg",
                            "iconSize": [50, 50], // size of the icon
                            "iconAnchor": [25, 25], // point of the icon which will correspond to marker's location
                            "popupAnchor": [0, -25], // point from which the popup should open relative to the iconAnchor
                            "className": "primary"
                        }
                    }
                }];
                
                pointLayer.on('layeradd', function(e) {
                    var marker = e.layer,
                    feature = marker.feature;
                    marker.setIcon(L.icon(feature.properties.icon));
                });
                
                map.on('click', function(ev) {
	                console.log(ev.latlng);
	                });
                pointLayer.setGeoJSON(geoJson);
            </script>
            {% endif %}
            </div>
            
            

<script>

	

	window.onload = function(){
		//alert(jQuery);	
		jQuery.ajax({
			dataType: "json",
			url: "http://dev.interactivemechanics.com/greatmigration/api/audio-points",
			success: function(data){
			  	//console.log(data);
			  	
			  	
			  	// Let's make a pretty map!
                // Tossing this here, since we need to manipulate it on the fly
                // based on what gets returned by the page.
                L.mapbox.accessToken = 'pk.eyJ1IjoiaW50ZXJhY3RpdmVtZWNoIiwiYSI6InJlcUtqSk0ifQ.RUwHuEkBbXoJ6SgOnXmYFg';
                var map = L.mapbox.map('map', 'mapbox.streets');
                map.setView([{{ field_location.field_latitude.value }}, {{ field_location.field_longitude.value }}], 15);
                map.scrollWheelZoom.disable();

                // Our feature layer for generating all icons and points.
                // Loops through all oral histories with location data.
                var pointLayer = L.mapbox.featureLayer().addTo(map);
                var geoJson = [{
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [
                            {{ field_location.field_longitude.value }},
                            {{ field_location.field_latitude.value }}
                        ]
                    },
                    properties: {
                        title: '{{ node.title.value }}',
                        type: '{{ content.field_artwork_type.0['#title'] }}',
                        "icon": {
                            "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-primary.svg",
                            "iconSize": [50, 50], // size of the icon
                            "iconAnchor": [25, 25], // point of the icon which will correspond to marker's location
                            "popupAnchor": [0, -25], // point from which the popup should open relative to the iconAnchor
                            "className": "primary"
                        }
                    }
                }
                {#
                {% for key, content in content.field_media_other if key|first != '#' %}
                    {% set field_location = content['#node'].field_location.0['#field_collection_item'] %}
                    ,{
                        type: 'Feature',
                        geometry: {
                            type: 'Point',
                            coordinates: [
                                {{ field_location.field_longitude.value }},
                                {{ field_location.field_latitude.value }}
                            ]
                        },
                        properties: {
                            title: '{{ content['#node'].title.value }}',
                            "icon": {
                                "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-audio.svg",
                                "iconSize": [40, 40], // size of the icon
                                "iconAnchor": [20, 20], // point of the icon which will correspond to marker's location
                                "popupAnchor": [0, -20], // point from which the popup should open relative to the iconAnchor
                                "className": "audio"
                            }
                        }
                    }
                {% endfor %}
                #}
                ];
                
                console.log(geoJson);
                
                for(var i = 0; i < data.length; i++) {
			  		var lat = data[i].field_location[0].field_latitude[0].value;
			  		var long = data[i].field_location[0].field_longitude[0].value;
			  		var title = data[i].title[0].value;  
			  		var file = data[i].field_media_audio_file[0].url;
					var image = "";
					
					if(data[i].field_thumbnail_image[0]) {
						image = data[i].field_thumbnail_image[0].url;
					} else {
						image = "http://www.hotelsharbor.com/images/no_photo.png";
					}
					
					
					var item = {
				                type: 'Feature',
				                geometry: {
				                    type: 'Point',
				                    coordinates: [
				                        long,
				                        lat
				                    ]
				                },
				                properties: {
				                    title: title,
				                    type: 'Audio',
				                    file: file,
				                    image: image,
				                    "icon": {
				                        "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-audio.svg",
				                        "iconSize": [40, 40], // size of the icon
				                        "iconAnchor": [20, 20], // point of the icon which will correspond to marker's location
				                        "popupAnchor": [0, -20], // point from which the popup should open relative to the iconAnchor
				                        "className": "audio"
				                    }
				                }
				            };
					
					geoJson.push(item);
				}
				
				pointLayer.on('layeradd', function(e) {
                    var marker = e.layer,
                    feature = marker.feature;
                    marker.setIcon(L.icon(feature.properties.icon));
                    // Create custom popup content
                    var audioHtml = "";
                    if(feature.properties.file) {
	                    //audioHtml = "<div class='audio-icon'><img onclick='testMe(this);' data-audio='"+ feature.properties.file +"' src='"+ feature.properties.image +"' width='64' height='64' /></div>";
	                    
	                    audioHtml = "<div class='right' style='float: left;width: 35%;position: relative;'>" +
  	"<div class='audio-icon'>" +
    	"<img src='"+ feature.properties.image +"' height='64' style='margin-bottom: 0px;'>" +
  	"</div>" +
    
    "<div class='overlay-play-icon'>"+
      "<img onclick='testMe(this);' data-audio='"+feature.properties.file+"' src='http://dev.interactivemechanics.com/greatmigration/themes/greatmigration/images/play-icon.png'>"+
    "</div></div>";
                    }
                    
					//var popupContent =  '<div class="map-popup"><h3 class="type">'+feature.properties.type+'</h3><h3 class="title">'+feature.properties.title+'</h3>' + audioHtml + '</div>';
					
					
					var right = "<div class='right' style='float: right;width: 60%;'><h3 class='type'>Audio Clip</h3><h3 class='title'>"+ feature.properties.title +"</h3></div>";
					var left = audioHtml;
					
					var popupContent = '<div class="map-popup">'+ left + right + '<br style="clear:both;" /></div>';
					

		            // http://leafletjs.com/reference.html#popup
		            marker.bindPopup(popupContent,{
		                closeButton: false,
		                minWidth: 320
		            });
                });
                pointLayer.setGeoJSON(geoJson);
			}
		});
	};
	
	function testMe(el) {
		var audioFile = el.getAttribute("data-audio");
		var audioTag = document.getElementById("myAudio"); 
		
		var audio = audioFile;
        $('#audio-player').removeClass('hidden').delay(100).queue(function (next) {
            $(this).addClass('in').find('audio').attr('src', audio);
            next();
        });
        $('#audio-player audio').on('ended', function() { 
            $('#audio-player').removeClass('in').delay(500).queue(function (next) {
                $(this).addClass('hidden');
                next();
            });
        }); 
		
		//audioTag.src = audioFile;
        //audioTag.load(); 
        //audioTag.play();
	}
</script>
        {% endif %}
    </section>
{% endif %}
{% if content.field_show_section_03 %}
<section id="03" class="page">
    <div class="content-container">
        <div class="images images-left">
            {{ content.field_about_the_project_image }}
        </div>            
        <div class="content content-right">
            <h3>About the project</h3>
            <p>{{ content.field_about_the_project_body }}</p>
        </div>
    </div>
</section>
{% endif %}

{% if content.field_media_other[0] %}
<section id="04">
    <div class="artwork-array">
        <div class="container">
            <h2 class="text-center">Other media and resources</h2>
            <div class="flex-container">
                {% for key, content in content.field_media_other if key|first != '#' %}
                    {% set image = content['#node'].field_thumbnail_image.entity.uri.value %}
                    {% set alt = content['#node'].field_thumbnail_image.alt %}
                    {% set title = content['#node'].title.value %}
                    {% set images = '' %}
                    {% set video = '' %}
                    {% set audio = '' %}

                    {% if content['#node'].field_media_gallery_images %}
                        {% set id = "launch-gallery" %}
                        {% set images = content['#node'].field_media_gallery_images %}
                    {% endif %}
                    {% if content['#node'].field_media_vimeo_link %}
                        {% set id = "launch-video" %}
                        {% set video = content['#node'].field_media_vimeo_link.value %}
                    {% endif %}
                    {% if content['#node'].field_media_audio_file %}
                        {% set id = "launch-audio" %}
                        {% set audio = content['#node'].field_media_audio_file.entity.uri.value %}
                    {% endif %}
    
                    {% include directory ~ '/inc/resource.html.twig' %}
    
                {% endfor %}
                {% for key, content in content.field_resources if key|first != '#' %}
                    {% set image = content['#node'].field_image.entity.uri.value %}
                    {% set alt = content['#node'].field_image.alt %}
                    {% set uri = content['#node'].field_link.uri %}
                    {% set title = content['#node'].title.value %}
    
                    {% include directory ~ '/inc/resource.html.twig' %}
    
                {% endfor %}
            </div>
        </div>
    </div>
</section>
{% else %}
 
<section style="border-bottom:1px solid #ddd;">
</section>

{% endif %}
{% if content.field_show_section_04 %}
<section id="05">
    <div class="container-fluid">
        <div class="artists">
        {% for key, artist in content.field_artists if key|first != '#' %}
            {% set artist = artist['#field_collection_item']%}
            <div class="artist">
                <div class="artist-metadata">
                    {% if artist.field_artist_image.0 %}
                        <div class="artist-image">
                            <img src="{{ file_url(artist.field_artist_image.entity.uri.value) }}" alt="{{ artist.field_artist_image.entity.alt }}" />
                        </div>
                    {% endif %}
                    <h2>{{ artist.field_artist_name.value }}
                        <small>{{ artist.field_artist_title.value }}</small>
                    </h2>
                </div>
                {{ artist.field_artist_bio.value | raw }}
                {% if artist.field_artist_website %}
                	{% if artist.field_artist_website.uri %}
                   		<a href="{{ artist.field_artist_website.uri }}" target="_blank" class="btn btn-default btn-lg">View the artist's website</a>
					{% endif %}
				{% endif %}
            </div>
        {% endfor %}
        </div>
    </div>
</section>
{% endif %}

<div id="audio-player" class="hidden fade">
    <audio id="myAudio" src="" controls autoplay preload="none"></audio>
</div>


<div id="artwork-scrollspy" class="border {% if content.field_artwork_type.0['#url'].routeParameters['taxonomy_term'] == 2 %}preciousplaces{% endif %}">
    <ol class="nav nav-pills">
        <li class="active"><a href="#01">Intro<span class="hidden-xs">duction</span></a></li>
        {% if content.field_show_section_01 %}<li><a href="#02"><span class="hidden-xs">The </span>Location</a></li>{% endif %}
        {% if content.field_show_section_03 %}<li><a href="#03"><span class="hidden-xs">The </span>Project</a></li>{% endif %}
        {% if content.field_media_other[0] %}<li><a href="#04"><span class="hidden-xs">Media & </span>Resources</a></li>{% endif %}
        {% if content.field_show_section_04 %}<li><a href="#05"><span class="hidden-xs">The </span>Artist</a></li>{% endif %}
    </ol>
</div>
