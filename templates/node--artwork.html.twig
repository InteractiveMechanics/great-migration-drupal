{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
<section id="01" class="container-fluid">
    <div class="artwork-hero-inner">                
        <div class="artwork-hero-image border">
            {% for key, content in content.field_poster_images if key|first != '#' %}
                {% set image = content['#item'].entity.uri.value %}
                {% set alt = content['#item'].alt %}

                {% if loop.first %}
                    <img src="{{ file_url(image) }}" alt="{{ alt }}" class="in" />
                {% else %}
                    <img src="{{ file_url(image) }}" alt="{{ alt }}" />
                {% endif %}
            {% endfor %}
        </div>
        <div class="artwork-hero-details-container">
            <div class="artwork-hero-details">
                <h3>{{ content.field_artwork_type.0['#title'] }}</h3>
                <h1>{{ node.title.value }}</h1>
                <p>{{ content.body }}</p>
                {% if content.field_media_primary_artwork.0['#node'].field_media_gallery_images %}
                    <a 
                        id="launch-gallery" 
                        class="btn btn-default btn-lg btn-inverted"
                        data-src-images='{% for image in content.field_media_primary_artwork.0['#node'].field_media_gallery_images %}{{- file_url(image.entity.uri.value) -}}{% if not loop.last %}, {% endif %}{% endfor %}'><span class="glyphicon glyphicon-picture"></span> View the Gallery</a><br/>
                {% endif %}
                {% if content.field_media_ %}
                    <a 
                        id="launch-video"
                        class="btn btn-default btn-lg btn-inverted"
                        data-src-video="'{{ content.field_media_.0['#node'].field_media_vimeo_link.value }}'"><span class="glyphicon glyphicon-facetime-video"></span> Watch the Artist Statement</a>
                {% endif %}
            </div>
        </div>
    </div>
</section>
{% if content.field_show_section_01 %}
    {% set field_location = content.field_location.0['#field_collection_item'] %}
    <section id="02" class="page">
        <div class="content-container">
            <div class="content content-left">
                <h3>About the location</h3>
                <p>{{ content.field_about_the_location_body }}</p>
            </div>
            <div class="images images-right">
                {{ content.field_about_the_location_image }}
            </div>
        </div>
        {% if content.field_show_section_02 %}
            <div id="map" class="full-map"></div>
            <script>
                // Let's make a pretty map!
                // Tossing this here, since we need to manipulate it on the fly
                // based on what gets returned by the page.
                L.mapbox.accessToken = 'pk.eyJ1IjoiaW50ZXJhY3RpdmVtZWNoIiwiYSI6InJlcUtqSk0ifQ.RUwHuEkBbXoJ6SgOnXmYFg';
                var map = L.mapbox.map('map', 'mapbox.streets');
                map.setView([{{ field_location.field_latitude.value }}, {{ field_location.field_longitude.value }}], 16);
                map.scrollWheelZoom.disable();

                // Our feature layer for generating all icons and points.
                // Loops through all oral histories with location data.
                var pointLayer = L.mapbox.featureLayer().addTo(map);
                var geoJson = [{
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: [
                            {{ field_location.field_longitude.value }},
                            {{ field_location.field_latitude.value }}
                        ]
                    },
                    properties: {
                        title: '{{ node.title.value }}',
                        "icon": {
                            "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-primary.svg",
                            "iconSize": [50, 50], // size of the icon
                            "iconAnchor": [25, 25], // point of the icon which will correspond to marker's location
                            "popupAnchor": [0, -25], // point from which the popup should open relative to the iconAnchor
                            "className": "primary"
                        }
                    }
                }
                {#
                {% for key, content in content.field_media_other if key|first != '#' %}
                    {% set field_location = content['#node'].field_location.0['#field_collection_item'] %}
                    ,{
                        type: 'Feature',
                        geometry: {
                            type: 'Point',
                            coordinates: [
                                {{ field_location.field_longitude.value }},
                                {{ field_location.field_latitude.value }}
                            ]
                        },
                        properties: {
                            title: '{{ content['#node'].title.value }}',
                            "icon": {
                                "iconUrl": "/greatmigration/{{ directory }}/css/img/marker-audio.svg",
                                "iconSize": [40, 40], // size of the icon
                                "iconAnchor": [20, 20], // point of the icon which will correspond to marker's location
                                "popupAnchor": [0, -20], // point from which the popup should open relative to the iconAnchor
                                "className": "audio"
                            }
                        }
                    }
                {% endfor %}
                #}
                ];
                pointLayer.on('layeradd', function(e) {
                    var marker = e.layer,
                    feature = marker.feature;
                    marker.setIcon(L.icon(feature.properties.icon));
                });
                pointLayer.setGeoJSON(geoJson);
            </script>
        {% endif %}
    </section>
{% endif %}
{% if content.field_show_section_03 %}
<section id="03" class="page">
    <div class="content-container">
        <div class="images images-left">
            {{ content.field_about_the_project_image }}
        </div>            
        <div class="content content-right">
            <h3>About the project</h3>
            <p>{{ content.field_about_the_project_body }}</p>
        </div>
    </div>
</section>
{% endif %}
<section id="04">
    <div class="media-container">
        <div class="container">
            <h2 class="text-center">Other media and resources</h2>
            <div class="resources">
                {% for key, content in content.field_resources if key|first != '#' %}
                    {% set image = content['#node'].field_image.entity.uri.value %}
                    {% set alt = content['#node'].field_image.alt %}
                    {% set uri = content['#node'].field_link.uri %}
                    {% set title = content['#node'].title.value %}
    
                    {% include directory ~ '/inc/resource.html.twig' %}
    
                {% endfor %}
                {% for key, content in content.field_media_other if key|first != '#' %}
                    {% set image = content['#node'].field_thumbnail_image.entity.uri.value %}
                    {% set alt = content['#node'].field_thumbnail_image.alt %}
                    {% set title = content['#node'].title.value %}
    
                    {% include directory ~ '/inc/resource.html.twig' %}
    
                {% endfor %}
            </div>
        </div>
    </div>
</section>
{% if content.field_show_section_04 %}
<section id="05">
    <div class="container-fluid">
        <div class="artist">
            
        </div>
    </div>
</section>
{% endif %}

<div id="artwork-scrollspy" class="border">
    <ol class="nav nav-pills nav-stacked">
        <li class="active"><a href="#01">Introduction</a></li>
        {% if content.field_show_section_01 %}<li><a href="#02">About the location</a></li>{% endif %}
        {% if content.field_show_section_03 %}<li><a href="#03">About the project</a></li>{% endif %}
        <li><a href="#04">Media & Resources</a></li>
        {% if content.field_show_section_04 %}<li><a href="#05">Artist information</a></li>{% endif %}
    </ol>
</div>
